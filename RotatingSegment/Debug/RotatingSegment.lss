
RotatingSegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002000  00002094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007a  0080007a  000020ae  2**0
                  ALLOC
  3 .stab         00001cbc  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cea  00000000  00000000  00003d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000694f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000783a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000085e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000089d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000091a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <main>
      8a:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_vSetPinDir>:
#include "../../LIB/BIT_MATH.h"

#include "DIO_reg.h"
#include "DIO_int.h"

void DIO_vSetPinDir(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Dir){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_vSetPinDir+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_vSetPinDir+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId){
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	6c 81       	ldd	r22, Y+4	; 0x04
     b66:	7d 81       	ldd	r23, Y+5	; 0x05
     b68:	61 30       	cpi	r22, 0x01	; 1
     b6a:	71 05       	cpc	r23, r1
     b6c:	d1 f1       	breq	.+116    	; 0xbe2 <DIO_vSetPinDir+0x9c>
     b6e:	8c 81       	ldd	r24, Y+4	; 0x04
     b70:	9d 81       	ldd	r25, Y+5	; 0x05
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	91 05       	cpc	r25, r1
     b76:	34 f4       	brge	.+12     	; 0xb84 <DIO_vSetPinDir+0x3e>
     b78:	2c 81       	ldd	r18, Y+4	; 0x04
     b7a:	3d 81       	ldd	r19, Y+5	; 0x05
     b7c:	21 15       	cp	r18, r1
     b7e:	31 05       	cpc	r19, r1
     b80:	71 f0       	breq	.+28     	; 0xb9e <DIO_vSetPinDir+0x58>
     b82:	94 c0       	rjmp	.+296    	; 0xcac <DIO_vSetPinDir+0x166>
     b84:	6c 81       	ldd	r22, Y+4	; 0x04
     b86:	7d 81       	ldd	r23, Y+5	; 0x05
     b88:	62 30       	cpi	r22, 0x02	; 2
     b8a:	71 05       	cpc	r23, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <DIO_vSetPinDir+0x4a>
     b8e:	4b c0       	rjmp	.+150    	; 0xc26 <DIO_vSetPinDir+0xe0>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <DIO_vSetPinDir+0x56>
     b9a:	67 c0       	rjmp	.+206    	; 0xc6a <DIO_vSetPinDir+0x124>
     b9c:	87 c0       	rjmp	.+270    	; 0xcac <DIO_vSetPinDir+0x166>
		case PORTA_ID: WRT_BIT(DDRA, A_u8PinId, A_u8Dir); break;
     b9e:	aa e3       	ldi	r26, 0x3A	; 58
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ea e3       	ldi	r30, 0x3A	; 58
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	48 2f       	mov	r20, r24
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_vSetPinDir+0x74>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	2a 95       	dec	r18
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_vSetPinDir+0x70>
     bbe:	80 95       	com	r24
     bc0:	48 23       	and	r20, r24
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	88 2f       	mov	r24, r24
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	b9 01       	movw	r22, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <DIO_vSetPinDir+0x90>
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	8a 95       	dec	r24
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <DIO_vSetPinDir+0x8c>
     bda:	cb 01       	movw	r24, r22
     bdc:	84 2b       	or	r24, r20
     bde:	8c 93       	st	X, r24
     be0:	65 c0       	rjmp	.+202    	; 0xcac <DIO_vSetPinDir+0x166>
		case PORTB_ID: WRT_BIT(DDRB, A_u8PinId, A_u8Dir); break;
     be2:	a7 e3       	ldi	r26, 0x37	; 55
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 e3       	ldi	r30, 0x37	; 55
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	8a 81       	ldd	r24, Y+2	; 0x02
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <DIO_vSetPinDir+0xb8>
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	2a 95       	dec	r18
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <DIO_vSetPinDir+0xb4>
     c02:	80 95       	com	r24
     c04:	48 23       	and	r20, r24
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	8a 81       	ldd	r24, Y+2	; 0x02
     c0e:	88 2f       	mov	r24, r24
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	b9 01       	movw	r22, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <DIO_vSetPinDir+0xd4>
     c16:	66 0f       	add	r22, r22
     c18:	77 1f       	adc	r23, r23
     c1a:	8a 95       	dec	r24
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <DIO_vSetPinDir+0xd0>
     c1e:	cb 01       	movw	r24, r22
     c20:	84 2b       	or	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	43 c0       	rjmp	.+134    	; 0xcac <DIO_vSetPinDir+0x166>
		case PORTC_ID: WRT_BIT(DDRC, A_u8PinId, A_u8Dir); break;
     c26:	a4 e3       	ldi	r26, 0x34	; 52
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e4 e3       	ldi	r30, 0x34	; 52
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_vSetPinDir+0xfc>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	2a 95       	dec	r18
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_vSetPinDir+0xf8>
     c46:	80 95       	com	r24
     c48:	48 23       	and	r20, r24
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	b9 01       	movw	r22, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <DIO_vSetPinDir+0x118>
     c5a:	66 0f       	add	r22, r22
     c5c:	77 1f       	adc	r23, r23
     c5e:	8a 95       	dec	r24
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <DIO_vSetPinDir+0x114>
     c62:	cb 01       	movw	r24, r22
     c64:	84 2b       	or	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	21 c0       	rjmp	.+66     	; 0xcac <DIO_vSetPinDir+0x166>
		case PORTD_ID: WRT_BIT(DDRD, A_u8PinId, A_u8Dir); break;
     c6a:	a1 e3       	ldi	r26, 0x31	; 49
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e1 e3       	ldi	r30, 0x31	; 49
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	48 2f       	mov	r20, r24
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <DIO_vSetPinDir+0x140>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	2a 95       	dec	r18
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <DIO_vSetPinDir+0x13c>
     c8a:	80 95       	com	r24
     c8c:	48 23       	and	r20, r24
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	88 2f       	mov	r24, r24
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	b9 01       	movw	r22, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_vSetPinDir+0x15c>
     c9e:	66 0f       	add	r22, r22
     ca0:	77 1f       	adc	r23, r23
     ca2:	8a 95       	dec	r24
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_vSetPinDir+0x158>
     ca6:	cb 01       	movw	r24, r22
     ca8:	84 2b       	or	r24, r20
     caa:	8c 93       	st	X, r24
	}
}
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <DIO_vSetPinVal>:

void DIO_vSetPinVal(u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Val){
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <DIO_vSetPinVal+0x6>
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <DIO_vSetPinVal+0x8>
     cc4:	0f 92       	push	r0
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	6a 83       	std	Y+2, r22	; 0x02
     cce:	4b 83       	std	Y+3, r20	; 0x03
	switch (A_u8PortId){
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3d 83       	std	Y+5, r19	; 0x05
     cd8:	2c 83       	std	Y+4, r18	; 0x04
     cda:	6c 81       	ldd	r22, Y+4	; 0x04
     cdc:	7d 81       	ldd	r23, Y+5	; 0x05
     cde:	61 30       	cpi	r22, 0x01	; 1
     ce0:	71 05       	cpc	r23, r1
     ce2:	d1 f1       	breq	.+116    	; 0xd58 <DIO_vSetPinVal+0x9c>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	91 05       	cpc	r25, r1
     cec:	34 f4       	brge	.+12     	; 0xcfa <DIO_vSetPinVal+0x3e>
     cee:	2c 81       	ldd	r18, Y+4	; 0x04
     cf0:	3d 81       	ldd	r19, Y+5	; 0x05
     cf2:	21 15       	cp	r18, r1
     cf4:	31 05       	cpc	r19, r1
     cf6:	71 f0       	breq	.+28     	; 0xd14 <DIO_vSetPinVal+0x58>
     cf8:	94 c0       	rjmp	.+296    	; 0xe22 <DIO_vSetPinVal+0x166>
     cfa:	6c 81       	ldd	r22, Y+4	; 0x04
     cfc:	7d 81       	ldd	r23, Y+5	; 0x05
     cfe:	62 30       	cpi	r22, 0x02	; 2
     d00:	71 05       	cpc	r23, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <DIO_vSetPinVal+0x4a>
     d04:	4b c0       	rjmp	.+150    	; 0xd9c <DIO_vSetPinVal+0xe0>
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	9d 81       	ldd	r25, Y+5	; 0x05
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <DIO_vSetPinVal+0x56>
     d10:	67 c0       	rjmp	.+206    	; 0xde0 <DIO_vSetPinVal+0x124>
     d12:	87 c0       	rjmp	.+270    	; 0xe22 <DIO_vSetPinVal+0x166>
		case PORTA_ID: WRT_BIT(PORTA, A_u8PinId, A_u8Val); break;
     d14:	ab e3       	ldi	r26, 0x3B	; 59
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e3       	ldi	r30, 0x3B	; 59
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_vSetPinVal+0x74>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	2a 95       	dec	r18
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_vSetPinVal+0x70>
     d34:	80 95       	com	r24
     d36:	48 23       	and	r20, r24
     d38:	8b 81       	ldd	r24, Y+3	; 0x03
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	88 2f       	mov	r24, r24
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	b9 01       	movw	r22, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_vSetPinVal+0x90>
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	8a 95       	dec	r24
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_vSetPinVal+0x8c>
     d50:	cb 01       	movw	r24, r22
     d52:	84 2b       	or	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	65 c0       	rjmp	.+202    	; 0xe22 <DIO_vSetPinVal+0x166>
		case PORTB_ID: WRT_BIT(PORTB, A_u8PinId, A_u8Val); break;
     d58:	a8 e3       	ldi	r26, 0x38	; 56
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e8 e3       	ldi	r30, 0x38	; 56
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	48 2f       	mov	r20, r24
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_vSetPinVal+0xb8>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	2a 95       	dec	r18
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_vSetPinVal+0xb4>
     d78:	80 95       	com	r24
     d7a:	48 23       	and	r20, r24
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	b9 01       	movw	r22, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_vSetPinVal+0xd4>
     d8c:	66 0f       	add	r22, r22
     d8e:	77 1f       	adc	r23, r23
     d90:	8a 95       	dec	r24
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_vSetPinVal+0xd0>
     d94:	cb 01       	movw	r24, r22
     d96:	84 2b       	or	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	43 c0       	rjmp	.+134    	; 0xe22 <DIO_vSetPinVal+0x166>
		case PORTC_ID: WRT_BIT(PORTC, A_u8PinId, A_u8Val); break;
     d9c:	a5 e3       	ldi	r26, 0x35	; 53
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e5 e3       	ldi	r30, 0x35	; 53
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_vSetPinVal+0xfc>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	2a 95       	dec	r18
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_vSetPinVal+0xf8>
     dbc:	80 95       	com	r24
     dbe:	48 23       	and	r20, r24
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	b9 01       	movw	r22, r18
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <DIO_vSetPinVal+0x118>
     dd0:	66 0f       	add	r22, r22
     dd2:	77 1f       	adc	r23, r23
     dd4:	8a 95       	dec	r24
     dd6:	e2 f7       	brpl	.-8      	; 0xdd0 <DIO_vSetPinVal+0x114>
     dd8:	cb 01       	movw	r24, r22
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	21 c0       	rjmp	.+66     	; 0xe22 <DIO_vSetPinVal+0x166>
		case PORTD_ID: WRT_BIT(PORTD, A_u8PinId, A_u8Val); break;
     de0:	a2 e3       	ldi	r26, 0x32	; 50
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e2 e3       	ldi	r30, 0x32	; 50
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_vSetPinVal+0x140>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	2a 95       	dec	r18
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_vSetPinVal+0x13c>
     e00:	80 95       	com	r24
     e02:	48 23       	and	r20, r24
     e04:	8b 81       	ldd	r24, Y+3	; 0x03
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	b9 01       	movw	r22, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_vSetPinVal+0x15c>
     e14:	66 0f       	add	r22, r22
     e16:	77 1f       	adc	r23, r23
     e18:	8a 95       	dec	r24
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_vSetPinVal+0x158>
     e1c:	cb 01       	movw	r24, r22
     e1e:	84 2b       	or	r24, r20
     e20:	8c 93       	st	X, r24
	}
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 A_u8PortId, u8 A_u8PinId){
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	00 d0       	rcall	.+0      	; 0xe38 <DIO_u8GetPinVal+0x6>
     e38:	00 d0       	rcall	.+0      	; 0xe3a <DIO_u8GetPinVal+0x8>
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	8a 83       	std	Y+2, r24	; 0x02
     e42:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8PinVal;
	switch (A_u8PortId){
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	3d 83       	std	Y+5, r19	; 0x05
     e4c:	2c 83       	std	Y+4, r18	; 0x04
     e4e:	4c 81       	ldd	r20, Y+4	; 0x04
     e50:	5d 81       	ldd	r21, Y+5	; 0x05
     e52:	41 30       	cpi	r20, 0x01	; 1
     e54:	51 05       	cpc	r21, r1
     e56:	41 f1       	breq	.+80     	; 0xea8 <DIO_u8GetPinVal+0x76>
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	91 05       	cpc	r25, r1
     e60:	34 f4       	brge	.+12     	; 0xe6e <DIO_u8GetPinVal+0x3c>
     e62:	2c 81       	ldd	r18, Y+4	; 0x04
     e64:	3d 81       	ldd	r19, Y+5	; 0x05
     e66:	21 15       	cp	r18, r1
     e68:	31 05       	cpc	r19, r1
     e6a:	61 f0       	breq	.+24     	; 0xe84 <DIO_u8GetPinVal+0x52>
     e6c:	52 c0       	rjmp	.+164    	; 0xf12 <DIO_u8GetPinVal+0xe0>
     e6e:	4c 81       	ldd	r20, Y+4	; 0x04
     e70:	5d 81       	ldd	r21, Y+5	; 0x05
     e72:	42 30       	cpi	r20, 0x02	; 2
     e74:	51 05       	cpc	r21, r1
     e76:	51 f1       	breq	.+84     	; 0xecc <DIO_u8GetPinVal+0x9a>
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	9d 81       	ldd	r25, Y+5	; 0x05
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	91 05       	cpc	r25, r1
     e80:	b9 f1       	breq	.+110    	; 0xef0 <DIO_u8GetPinVal+0xbe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <DIO_u8GetPinVal+0xe0>
		case PORTA_ID: L_u8PinVal = GET_BIT(PINA, A_u8PinId); break;
     e84:	e9 e3       	ldi	r30, 0x39	; 57
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	a9 01       	movw	r20, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_u8GetPinVal+0x6a>
     e98:	55 95       	asr	r21
     e9a:	47 95       	ror	r20
     e9c:	8a 95       	dec	r24
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_u8GetPinVal+0x66>
     ea0:	ca 01       	movw	r24, r20
     ea2:	81 70       	andi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	35 c0       	rjmp	.+106    	; 0xf12 <DIO_u8GetPinVal+0xe0>
		case PORTB_ID: L_u8PinVal = GET_BIT(PINB, A_u8PinId); break;
     ea8:	e6 e3       	ldi	r30, 0x36	; 54
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	a9 01       	movw	r20, r18
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_u8GetPinVal+0x8e>
     ebc:	55 95       	asr	r21
     ebe:	47 95       	ror	r20
     ec0:	8a 95       	dec	r24
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_u8GetPinVal+0x8a>
     ec4:	ca 01       	movw	r24, r20
     ec6:	81 70       	andi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	23 c0       	rjmp	.+70     	; 0xf12 <DIO_u8GetPinVal+0xe0>
		case PORTC_ID: L_u8PinVal = GET_BIT(PINC, A_u8PinId); break;
     ecc:	e3 e3       	ldi	r30, 0x33	; 51
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a9 01       	movw	r20, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_u8GetPinVal+0xb2>
     ee0:	55 95       	asr	r21
     ee2:	47 95       	ror	r20
     ee4:	8a 95       	dec	r24
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_u8GetPinVal+0xae>
     ee8:	ca 01       	movw	r24, r20
     eea:	81 70       	andi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <DIO_u8GetPinVal+0xe0>
		case PORTD_ID: L_u8PinVal = GET_BIT(PIND, A_u8PinId); break;
     ef0:	e0 e3       	ldi	r30, 0x30	; 48
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	88 2f       	mov	r24, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	a9 01       	movw	r20, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_u8GetPinVal+0xd6>
     f04:	55 95       	asr	r21
     f06:	47 95       	ror	r20
     f08:	8a 95       	dec	r24
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_u8GetPinVal+0xd2>
     f0c:	ca 01       	movw	r24, r20
     f0e:	81 70       	andi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_u8PinVal;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DIO_vSetPortDir>:

void DIO_vSetPortDir(u8 A_u8PortId, u8 A_u8Dir){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <DIO_vSetPortDir+0x6>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DIO_vSetPortDir+0x8>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_vSetPortDir+0xa>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Dir==DIR_INPUT){
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	88 23       	and	r24, r24
     f3a:	99 f5       	brne	.+102    	; 0xfa2 <DIO_vSetPortDir+0x7e>
		switch(A_u8PortId){
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3e 83       	std	Y+6, r19	; 0x06
     f44:	2d 83       	std	Y+5, r18	; 0x05
     f46:	8d 81       	ldd	r24, Y+5	; 0x05
     f48:	9e 81       	ldd	r25, Y+6	; 0x06
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	d1 f0       	breq	.+52     	; 0xf84 <DIO_vSetPortDir+0x60>
     f50:	2d 81       	ldd	r18, Y+5	; 0x05
     f52:	3e 81       	ldd	r19, Y+6	; 0x06
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	2c f4       	brge	.+10     	; 0xf64 <DIO_vSetPortDir+0x40>
     f5a:	8d 81       	ldd	r24, Y+5	; 0x05
     f5c:	9e 81       	ldd	r25, Y+6	; 0x06
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	61 f0       	breq	.+24     	; 0xf7a <DIO_vSetPortDir+0x56>
     f62:	54 c0       	rjmp	.+168    	; 0x100c <DIO_vSetPortDir+0xe8>
     f64:	2d 81       	ldd	r18, Y+5	; 0x05
     f66:	3e 81       	ldd	r19, Y+6	; 0x06
     f68:	22 30       	cpi	r18, 0x02	; 2
     f6a:	31 05       	cpc	r19, r1
     f6c:	81 f0       	breq	.+32     	; 0xf8e <DIO_vSetPortDir+0x6a>
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	83 30       	cpi	r24, 0x03	; 3
     f74:	91 05       	cpc	r25, r1
     f76:	81 f0       	breq	.+32     	; 0xf98 <DIO_vSetPortDir+0x74>
     f78:	49 c0       	rjmp	.+146    	; 0x100c <DIO_vSetPortDir+0xe8>
			case PORTA_ID: DDRA=A_u8Dir; break;
     f7a:	ea e3       	ldi	r30, 0x3A	; 58
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	80 83       	st	Z, r24
     f82:	44 c0       	rjmp	.+136    	; 0x100c <DIO_vSetPortDir+0xe8>
			case PORTB_ID: DDRB=A_u8Dir; break;
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	80 83       	st	Z, r24
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <DIO_vSetPortDir+0xe8>
			case PORTC_ID: DDRC=A_u8Dir; break;
     f8e:	e4 e3       	ldi	r30, 0x34	; 52
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	80 83       	st	Z, r24
     f96:	3a c0       	rjmp	.+116    	; 0x100c <DIO_vSetPortDir+0xe8>
			case PORTD_ID: DDRD=A_u8Dir; break;
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	80 83       	st	Z, r24
     fa0:	35 c0       	rjmp	.+106    	; 0x100c <DIO_vSetPortDir+0xe8>
		}
	}
	else if(A_u8Dir==DIR_OUTPUT){
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	91 f5       	brne	.+100    	; 0x100c <DIO_vSetPortDir+0xe8>
		switch(A_u8PortId){
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	3c 83       	std	Y+4, r19	; 0x04
     fb0:	2b 83       	std	Y+3, r18	; 0x03
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	91 05       	cpc	r25, r1
     fba:	d1 f0       	breq	.+52     	; 0xff0 <DIO_vSetPortDir+0xcc>
     fbc:	2b 81       	ldd	r18, Y+3	; 0x03
     fbe:	3c 81       	ldd	r19, Y+4	; 0x04
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <DIO_vSetPortDir+0xac>
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	61 f0       	breq	.+24     	; 0xfe6 <DIO_vSetPortDir+0xc2>
     fce:	1e c0       	rjmp	.+60     	; 0x100c <DIO_vSetPortDir+0xe8>
     fd0:	2b 81       	ldd	r18, Y+3	; 0x03
     fd2:	3c 81       	ldd	r19, Y+4	; 0x04
     fd4:	22 30       	cpi	r18, 0x02	; 2
     fd6:	31 05       	cpc	r19, r1
     fd8:	81 f0       	breq	.+32     	; 0xffa <DIO_vSetPortDir+0xd6>
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	9c 81       	ldd	r25, Y+4	; 0x04
     fde:	83 30       	cpi	r24, 0x03	; 3
     fe0:	91 05       	cpc	r25, r1
     fe2:	81 f0       	breq	.+32     	; 0x1004 <DIO_vSetPortDir+0xe0>
     fe4:	13 c0       	rjmp	.+38     	; 0x100c <DIO_vSetPortDir+0xe8>
		    case PORTA_ID: DDRA=0xff; break;
     fe6:	ea e3       	ldi	r30, 0x3A	; 58
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	8f ef       	ldi	r24, 0xFF	; 255
     fec:	80 83       	st	Z, r24
     fee:	0e c0       	rjmp	.+28     	; 0x100c <DIO_vSetPortDir+0xe8>
		    case PORTB_ID: DDRB=0xff; break;
     ff0:	e7 e3       	ldi	r30, 0x37	; 55
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	80 83       	st	Z, r24
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <DIO_vSetPortDir+0xe8>
		    case PORTC_ID: DDRC=0xff; break;
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	8f ef       	ldi	r24, 0xFF	; 255
    1000:	80 83       	st	Z, r24
    1002:	04 c0       	rjmp	.+8      	; 0x100c <DIO_vSetPortDir+0xe8>
		    case PORTD_ID: DDRD=0xff; break;
    1004:	e1 e3       	ldi	r30, 0x31	; 49
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	8f ef       	ldi	r24, 0xFF	; 255
    100a:	80 83       	st	Z, r24
		}
	}
}
    100c:	26 96       	adiw	r28, 0x06	; 6
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <DIO_vSetPortVal>:


void DIO_vSetPortVal(u8 A_u8PortId,u8 A_u8Val){
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <DIO_vSetPortVal+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <DIO_vSetPortVal+0x8>
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	6a 83       	std	Y+2, r22	; 0x02
		switch(A_u8PortId){
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	3c 83       	std	Y+4, r19	; 0x04
    1036:	2b 83       	std	Y+3, r18	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	91 05       	cpc	r25, r1
    1040:	d1 f0       	breq	.+52     	; 0x1076 <DIO_vSetPortVal+0x58>
    1042:	2b 81       	ldd	r18, Y+3	; 0x03
    1044:	3c 81       	ldd	r19, Y+4	; 0x04
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	2c f4       	brge	.+10     	; 0x1056 <DIO_vSetPortVal+0x38>
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	61 f0       	breq	.+24     	; 0x106c <DIO_vSetPortVal+0x4e>
    1054:	1e c0       	rjmp	.+60     	; 0x1092 <DIO_vSetPortVal+0x74>
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <DIO_vSetPortVal+0x62>
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	91 05       	cpc	r25, r1
    1068:	81 f0       	breq	.+32     	; 0x108a <DIO_vSetPortVal+0x6c>
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <DIO_vSetPortVal+0x74>
			case PORTA_ID: PORTA=A_u8Val; break;
    106c:	eb e3       	ldi	r30, 0x3B	; 59
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	80 83       	st	Z, r24
    1074:	0e c0       	rjmp	.+28     	; 0x1092 <DIO_vSetPortVal+0x74>
		    case PORTB_ID: PORTB=A_u8Val; break;
    1076:	e8 e3       	ldi	r30, 0x38	; 56
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	80 83       	st	Z, r24
    107e:	09 c0       	rjmp	.+18     	; 0x1092 <DIO_vSetPortVal+0x74>
		    case PORTC_ID: PORTC=A_u8Val; break;
    1080:	e5 e3       	ldi	r30, 0x35	; 53
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	80 83       	st	Z, r24
    1088:	04 c0       	rjmp	.+8      	; 0x1092 <DIO_vSetPortVal+0x74>
		    case PORTD_ID: PORTD=A_u8Val; break;
    108a:	e2 e3       	ldi	r30, 0x32	; 50
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 83       	st	Z, r24
		}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_vTogglePinVal>:

void DIO_vTogglePinVal(u8 A_u8PortId,u8 A_u8PinId){
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_vTogglePinVal+0x6>
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	6a 83       	std	Y+2, r22	; 0x02
		A_u8PortId^=(1<<A_u8PinId);
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_vTogglePinVal+0x20>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_vTogglePinVal+0x1c>
    10c4:	98 2f       	mov	r25, r24
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	89 27       	eor	r24, r25
    10ca:	89 83       	std	Y+1, r24	; 0x01
}
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <DIO_u8GetPortVal>:



u8 DIO_u8GetPortVal(u8 A_u8PortId){
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	00 d0       	rcall	.+0      	; 0x10dc <DIO_u8GetPortVal+0x6>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <DIO_u8GetPortVal+0x8>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8PortVal;
	switch (A_u8PortId){
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3c 83       	std	Y+4, r19	; 0x04
    10ec:	2b 83       	std	Y+3, r18	; 0x03
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	d1 f0       	breq	.+52     	; 0x112c <DIO_u8GetPortVal+0x56>
    10f8:	2b 81       	ldd	r18, Y+3	; 0x03
    10fa:	3c 81       	ldd	r19, Y+4	; 0x04
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DIO_u8GetPortVal+0x36>
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	61 f0       	breq	.+24     	; 0x1122 <DIO_u8GetPortVal+0x4c>
    110a:	1e c0       	rjmp	.+60     	; 0x1148 <DIO_u8GetPortVal+0x72>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	81 f0       	breq	.+32     	; 0x1136 <DIO_u8GetPortVal+0x60>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	81 f0       	breq	.+32     	; 0x1140 <DIO_u8GetPortVal+0x6a>
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <DIO_u8GetPortVal+0x72>
			case PORTA_ID: L_u8PortVal = PINA; break;
    1122:	e9 e3       	ldi	r30, 0x39	; 57
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	0e c0       	rjmp	.+28     	; 0x1148 <DIO_u8GetPortVal+0x72>
			case PORTB_ID: L_u8PortVal = PINB; break;
    112c:	e6 e3       	ldi	r30, 0x36	; 54
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <DIO_u8GetPortVal+0x72>
			case PORTC_ID: L_u8PortVal = PINC; break;
    1136:	e3 e3       	ldi	r30, 0x33	; 51
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <DIO_u8GetPortVal+0x72>
			case PORTD_ID: L_u8PortVal = PIND; break;
    1140:	e0 e3       	ldi	r30, 0x30	; 48
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	89 83       	std	Y+1, r24	; 0x01
		}
	return L_u8PortVal;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <SWITCH_vInit>:
#include "SWITCH_pri.h"
#include "SWITCH_cfg.h"
#include "SWITCH_int.h"


void SWITCH_vInit(u8 A_u8SwitchId){
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <SWITCH_vInit+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <SWITCH_vInit+0x8>
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8SwitchId){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3d 83       	std	Y+5, r19	; 0x05
    1170:	2c 83       	std	Y+4, r18	; 0x04
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	79 f0       	breq	.+30     	; 0x119a <SWITCH_vInit+0x42>
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	81 f0       	breq	.+32     	; 0x11a6 <SWITCH_vInit+0x4e>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	89 f4       	brne	.+34     	; 0x11b0 <SWITCH_vInit+0x58>
			case SWITCH0_ID:	DIO_vSetPinDir(SWITCH0_PORT,SWITCH0_PIN,DIR_INPUT);	break;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	62 e0       	ldi	r22, 0x02	; 2
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1198:	0b c0       	rjmp	.+22     	; 0x11b0 <SWITCH_vInit+0x58>
			case SWITCH1_ID: 	DIO_vSetPinDir(SWITCH1_PORT,SWITCH1_PIN,DIR_INPUT);	break;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	63 e0       	ldi	r22, 0x03	; 3
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <SWITCH_vInit+0x58>
			case SWITCH2_ID:	DIO_vSetPinDir(SWITCH2_PORT,SWITCH2_PIN,DIR_INPUT);	break;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	64 e0       	ldi	r22, 0x04	; 4
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
	}
#if (BTN_PULLING==INTERNAL_PULLUP)				// will be in code only if BTN_PULLING==INTERNAL_PULLIP
		switch(A_u8SwitchId){
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3b 83       	std	Y+3, r19	; 0x03
    11b8:	2a 83       	std	Y+2, r18	; 0x02
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	9b 81       	ldd	r25, Y+3	; 0x03
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	79 f0       	breq	.+30     	; 0x11e2 <SWITCH_vInit+0x8a>
    11c4:	2a 81       	ldd	r18, Y+2	; 0x02
    11c6:	3b 81       	ldd	r19, Y+3	; 0x03
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	81 f0       	breq	.+32     	; 0x11ee <SWITCH_vInit+0x96>
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	89 f4       	brne	.+34     	; 0x11f8 <SWITCH_vInit+0xa0>
			case SWITCH0_ID:	DIO_vSetPinVal(SWITCH0_PORT,SWITCH0_PIN,VAL_HIGH);	break;
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	62 e0       	ldi	r22, 0x02	; 2
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    11e0:	0b c0       	rjmp	.+22     	; 0x11f8 <SWITCH_vInit+0xa0>
			case SWITCH1_ID: 	DIO_vSetPinVal(SWITCH1_PORT,SWITCH1_PIN,VAL_HIGH);	break;
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	63 e0       	ldi	r22, 0x03	; 3
    11e6:	41 e0       	ldi	r20, 0x01	; 1
    11e8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    11ec:	05 c0       	rjmp	.+10     	; 0x11f8 <SWITCH_vInit+0xa0>
			case SWITCH2_ID:	DIO_vSetPinVal(SWITCH2_PORT,SWITCH2_PIN,VAL_HIGH);	break;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	64 e0       	ldi	r22, 0x04	; 4
    11f2:	41 e0       	ldi	r20, 0x01	; 1
    11f4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
#endif
		}
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <SWITCH_vInitAll>:

void SWITCH_vInitAll(){
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPinDir(SWITCH0_PORT,SWITCH0_PIN,DIR_INPUT);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	62 e0       	ldi	r22, 0x02	; 2
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
	DIO_vSetPinDir(SWITCH1_PORT,SWITCH1_PIN,DIR_INPUT);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	63 e0       	ldi	r22, 0x03	; 3
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
	DIO_vSetPinDir(SWITCH2_PORT,SWITCH2_PIN,DIR_INPUT);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	64 e0       	ldi	r22, 0x04	; 4
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
#if (BTN_PULLING==INTERNAL_PULLUP)				// will be in code only if BTN_PULLING==INTERNAL_PULLIP
	DIO_vSetPinVal(SWITCH0_PORT,SWITCH0_PIN,VAL_HIGH);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	62 e0       	ldi	r22, 0x02	; 2
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
	DIO_vSetPinVal(SWITCH1_PORT,SWITCH1_PIN,VAL_HIGH);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	63 e0       	ldi	r22, 0x03	; 3
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
	DIO_vSetPinVal(SWITCH2_PORT,SWITCH2_PIN,VAL_HIGH);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	64 e0       	ldi	r22, 0x04	; 4
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
#endif
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <SWITCH_u8GetState>:

u8 SWITCH_u8GetState(u8 A_u8SwitchId){
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <SWITCH_u8GetState+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <SWITCH_u8GetState+0x8>
    125a:	0f 92       	push	r0
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	8b 83       	std	Y+3, r24	; 0x03
	u8 L_u8SwitchState;
	u8 L_u8ResState;
		switch(A_u8SwitchId){
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3d 83       	std	Y+5, r19	; 0x05
    126a:	2c 83       	std	Y+4, r18	; 0x04
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	79 f0       	breq	.+30     	; 0x1294 <SWITCH_u8GetState+0x42>
    1276:	2c 81       	ldd	r18, Y+4	; 0x04
    1278:	3d 81       	ldd	r19, Y+5	; 0x05
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <SWITCH_u8GetState+0x4e>
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	89 f4       	brne	.+34     	; 0x12aa <SWITCH_u8GetState+0x58>
			case SWITCH0_ID:	L_u8SwitchState = DIO_u8GetPinVal(SWITCH0_PORT,SWITCH0_PIN);	break;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	62 e0       	ldi	r22, 0x02	; 2
    128c:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    1290:	8a 83       	std	Y+2, r24	; 0x02
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <SWITCH_u8GetState+0x58>
			case SWITCH1_ID:	L_u8SwitchState = DIO_u8GetPinVal(SWITCH1_PORT,SWITCH1_PIN);	break;
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	63 e0       	ldi	r22, 0x03	; 3
    1298:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    129c:	8a 83       	std	Y+2, r24	; 0x02
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <SWITCH_u8GetState+0x58>
			case SWITCH2_ID:	L_u8SwitchState = DIO_u8GetPinVal(SWITCH2_PORT,SWITCH2_PIN);	break;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	64 e0       	ldi	r22, 0x04	; 4
    12a4:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    12a8:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(L_u8SwitchState==0){	L_u8ResState=SWITCH_ON;	}
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	88 23       	and	r24, r24
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <SWITCH_u8GetState+0x64>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	01 c0       	rjmp	.+2      	; 0x12b8 <SWITCH_u8GetState+0x66>
		else				  {	L_u8ResState=SWITCH_OFF;}
    12b6:	19 82       	std	Y+1, r1	; 0x01
	return L_u8ResState;
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <SSD_vInit>:
#include "SSD_pri.h"
#include "SSD_cfg.h"
#include "SSD_int.h"


void SSD_vInit(u8 A_u8SsdId){
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <SSD_vInit+0x6>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8SsdId){
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	3b 83       	std	Y+3, r19	; 0x03
    12e0:	2a 83       	std	Y+2, r18	; 0x02
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	31 f0       	breq	.+12     	; 0x12f6 <SSD_vInit+0x2c>
    12ea:	2a 81       	ldd	r18, Y+2	; 0x02
    12ec:	3b 81       	ldd	r19, Y+3	; 0x03
    12ee:	21 30       	cpi	r18, 0x01	; 1
    12f0:	31 05       	cpc	r19, r1
    12f2:	71 f0       	breq	.+28     	; 0x1310 <SSD_vInit+0x46>
    12f4:	19 c0       	rjmp	.+50     	; 0x1328 <SSD_vInit+0x5e>
		case SSD0_ID:	DIO_vSetPortDir(SSD0_DATA_PORT,DIR_OUTPUT);	DIO_vSetPinDir(SSD0_EN_PORT,SSD0_EN_PIN,DIR_OUTPUT);	SSD_vTurnOff(SSD0_ID);	break;
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_vSetPortDir>
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SSD_vTurnOff>
    130e:	0c c0       	rjmp	.+24     	; 0x1328 <SSD_vInit+0x5e>
		case SSD1_ID:	DIO_vSetPortDir(SSD0_DATA_PORT,DIR_OUTPUT);	DIO_vSetPinDir(SSD0_EN_PORT,SSD0_EN_PIN,DIR_OUTPUT);	SSD_vTurnOff(SSD1_ID);	break;
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_vSetPortDir>
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SSD_vTurnOff>
	}
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <SSD_vInitBoth>:

void SSD_vInitBoth(){
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	DIO_vSetPortDir(SSD0_DATA_PORT,DIR_OUTPUT);
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_vSetPortDir>
	DIO_vSetPortDir(SSD1_DATA_PORT,DIR_OUTPUT);
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_vSetPortDir>

	DIO_vSetPinDir(SSD0_EN_PORT,SSD0_EN_PIN,DIR_OUTPUT);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	41 e0       	ldi	r20, 0x01	; 1
    1352:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
	DIO_vSetPinDir(SSD1_EN_PORT,SSD1_EN_PIN,DIR_OUTPUT);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	41 e0       	ldi	r20, 0x01	; 1
    135c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>

	//SSD_vTurnOff(SSD0_ID);
	//SSD_vTurnOff(SSD1_ID);
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <SSD_vTurnOn>:

void SSD_vTurnOn(u8 A_u8SsdId){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <SSD_vTurnOn+0x6>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8SsdId){
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3b 83       	std	Y+3, r19	; 0x03
    137c:	2a 83       	std	Y+2, r18	; 0x02
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	9b 81       	ldd	r25, Y+3	; 0x03
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	31 f0       	breq	.+12     	; 0x1392 <SSD_vTurnOn+0x2c>
    1386:	2a 81       	ldd	r18, Y+2	; 0x02
    1388:	3b 81       	ldd	r19, Y+3	; 0x03
    138a:	21 30       	cpi	r18, 0x01	; 1
    138c:	31 05       	cpc	r19, r1
    138e:	39 f0       	breq	.+14     	; 0x139e <SSD_vTurnOn+0x38>
    1390:	0b c0       	rjmp	.+22     	; 0x13a8 <SSD_vTurnOn+0x42>
		case SSD0_ID:
		{
#if (SSD_COM==COM_CATHODE)
			DIO_vSetPinVal(SSD0_EN_PORT,SSD0_EN_PIN,VAL_LOW);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <SSD_vTurnOn+0x42>
		}

		case SSD1_ID:
		{
#if (SSD_COM==COM_CATHODE)
			DIO_vSetPinVal(SSD1_EN_PORT,SSD1_EN_PIN,VAL_LOW);
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
			DIO_vSetPinVal(SSD1_EN_PORT,SSD1_EN_PIN,VAL_HIGH);
#endif
		break;
		}
	}
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <SSD_vTurnOff>:

void SSD_vTurnOff(u8 A_u8SsdId){
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <SSD_vTurnOff+0x6>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8SsdId){
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3b 83       	std	Y+3, r19	; 0x03
    13ca:	2a 83       	std	Y+2, r18	; 0x02
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	31 f0       	breq	.+12     	; 0x13e0 <SSD_vTurnOff+0x2c>
    13d4:	2a 81       	ldd	r18, Y+2	; 0x02
    13d6:	3b 81       	ldd	r19, Y+3	; 0x03
    13d8:	21 30       	cpi	r18, 0x01	; 1
    13da:	31 05       	cpc	r19, r1
    13dc:	39 f0       	breq	.+14     	; 0x13ec <SSD_vTurnOff+0x38>
    13de:	0b c0       	rjmp	.+22     	; 0x13f6 <SSD_vTurnOff+0x42>
		case SSD0_ID:
		{
#if (SSD_COM==COM_CATHODE)
			DIO_vSetPinVal(SSD0_EN_PORT,SSD0_EN_PIN,VAL_HIGH);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <SSD_vTurnOff+0x42>
		}

		case SSD1_ID:
		{
#if (SSD_COM==COM_CATHODE)
			DIO_vSetPinVal(SSD1_EN_PORT,SSD1_EN_PIN,VAL_HIGH);
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	60 e0       	ldi	r22, 0x00	; 0
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
			DIO_vSetPinVal(SSD1_EN_PORT,SSD1_EN_PIN,VAL_LOW);
#endif
		break;
		}
	}
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <SSD_vDisplayNum>:

void SSD_vDisplayNum(u8 A_u8SsdId,u8 A_u8Val){
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <SSD_vDisplayNum+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <SSD_vDisplayNum+0x8>
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	6a 83       	std	Y+2, r22	; 0x02
			0b00000111,
			0b01111111,
			0b01101111,
	};

	switch(A_u8SsdId)
    1412:	89 81       	ldd	r24, Y+1	; 0x01
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3c 83       	std	Y+4, r19	; 0x04
    141a:	2b 83       	std	Y+3, r18	; 0x03
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	31 f0       	breq	.+12     	; 0x1430 <SSD_vDisplayNum+0x2e>
    1424:	2b 81       	ldd	r18, Y+3	; 0x03
    1426:	3c 81       	ldd	r19, Y+4	; 0x04
    1428:	21 30       	cpi	r18, 0x01	; 1
    142a:	31 05       	cpc	r19, r1
    142c:	69 f0       	breq	.+26     	; 0x1448 <SSD_vDisplayNum+0x46>
    142e:	17 c0       	rjmp	.+46     	; 0x145e <SSD_vDisplayNum+0x5c>
	{
		case SSD0_ID:
		{
#if(SSD_COM==COM_CATHODE)
			DIO_vSetPortVal(SSD0_DATA_PORT,L_u8SsdDecToSegArr[A_u8Val]);
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	fc 01       	movw	r30, r24
    1438:	e8 59       	subi	r30, 0x98	; 152
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	90 81       	ld	r25, Z
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	69 2f       	mov	r22, r25
    1442:	0e 94 0f 08 	call	0x101e	; 0x101e <DIO_vSetPortVal>
    1446:	0b c0       	rjmp	.+22     	; 0x145e <SSD_vDisplayNum+0x5c>
		}

		case SSD1_ID:
		{
#if(SSD_COM==COM_CATHODE)
			DIO_vSetPortVal(SSD1_DATA_PORT,L_u8SsdDecToSegArr[A_u8Val]);
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	fc 01       	movw	r30, r24
    1450:	e8 59       	subi	r30, 0x98	; 152
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	90 81       	ld	r25, Z
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	69 2f       	mov	r22, r25
    145a:	0e 94 0f 08 	call	0x101e	; 0x101e <DIO_vSetPortVal>
			DIO_vSetPortVal(SSD1_DATA_PORT,~(L_u8SsdDecToSegArr[A_u8Val]));
#endif
		break;
		}
	}
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <LED_vInit>:
#include "LED_cfg.h"
#include "LED_int.h"



void LED_vInit(u8 A_u8LedId){
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <LED_vInit+0x6>
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8LedId){
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3b 83       	std	Y+3, r19	; 0x03
    1482:	2a 83       	std	Y+2, r18	; 0x02
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	83 30       	cpi	r24, 0x03	; 3
    148a:	91 05       	cpc	r25, r1
    148c:	d9 f1       	breq	.+118    	; 0x1504 <LED_vInit+0x98>
    148e:	2a 81       	ldd	r18, Y+2	; 0x02
    1490:	3b 81       	ldd	r19, Y+3	; 0x03
    1492:	24 30       	cpi	r18, 0x04	; 4
    1494:	31 05       	cpc	r19, r1
    1496:	7c f4       	brge	.+30     	; 0x14b6 <LED_vInit+0x4a>
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	9b 81       	ldd	r25, Y+3	; 0x03
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	91 05       	cpc	r25, r1
    14a0:	29 f1       	breq	.+74     	; 0x14ec <LED_vInit+0x80>
    14a2:	2a 81       	ldd	r18, Y+2	; 0x02
    14a4:	3b 81       	ldd	r19, Y+3	; 0x03
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	34 f5       	brge	.+76     	; 0x14f8 <LED_vInit+0x8c>
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	9b 81       	ldd	r25, Y+3	; 0x03
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	b1 f0       	breq	.+44     	; 0x14e0 <LED_vInit+0x74>
    14b4:	44 c0       	rjmp	.+136    	; 0x153e <LED_vInit+0xd2>
    14b6:	2a 81       	ldd	r18, Y+2	; 0x02
    14b8:	3b 81       	ldd	r19, Y+3	; 0x03
    14ba:	25 30       	cpi	r18, 0x05	; 5
    14bc:	31 05       	cpc	r19, r1
    14be:	71 f1       	breq	.+92     	; 0x151c <LED_vInit+0xb0>
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	9b 81       	ldd	r25, Y+3	; 0x03
    14c4:	85 30       	cpi	r24, 0x05	; 5
    14c6:	91 05       	cpc	r25, r1
    14c8:	1c f1       	brlt	.+70     	; 0x1510 <LED_vInit+0xa4>
    14ca:	2a 81       	ldd	r18, Y+2	; 0x02
    14cc:	3b 81       	ldd	r19, Y+3	; 0x03
    14ce:	26 30       	cpi	r18, 0x06	; 6
    14d0:	31 05       	cpc	r19, r1
    14d2:	51 f1       	breq	.+84     	; 0x1528 <LED_vInit+0xbc>
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	87 30       	cpi	r24, 0x07	; 7
    14da:	91 05       	cpc	r25, r1
    14dc:	59 f1       	breq	.+86     	; 0x1534 <LED_vInit+0xc8>
    14de:	2f c0       	rjmp	.+94     	; 0x153e <LED_vInit+0xd2>
		case LED0_ID:	DIO_vSetPinDir(LED0_PORT,LED0_PIN,DIR_OUTPUT);	break;
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    14ea:	29 c0       	rjmp	.+82     	; 0x153e <LED_vInit+0xd2>
		case LED1_ID: 	DIO_vSetPinDir(LED1_PORT,LED1_PIN,DIR_OUTPUT);	break;
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    14f6:	23 c0       	rjmp	.+70     	; 0x153e <LED_vInit+0xd2>
		case LED2_ID:	DIO_vSetPinDir(LED2_PORT,LED2_PIN,DIR_OUTPUT);	break;
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	41 e0       	ldi	r20, 0x01	; 1
    14fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1502:	1d c0       	rjmp	.+58     	; 0x153e <LED_vInit+0xd2>
		case LED3_ID:	DIO_vSetPinDir(LED3_PORT,LED3_PIN,DIR_OUTPUT);	break;
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    150e:	17 c0       	rjmp	.+46     	; 0x153e <LED_vInit+0xd2>
		case LED4_ID:	DIO_vSetPinDir(LED4_PORT,LED4_PIN,DIR_OUTPUT);	break;
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	64 e0       	ldi	r22, 0x04	; 4
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    151a:	11 c0       	rjmp	.+34     	; 0x153e <LED_vInit+0xd2>
		case LED5_ID:	DIO_vSetPinDir(LED5_PORT,LED5_PIN,DIR_OUTPUT);	break;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	65 e0       	ldi	r22, 0x05	; 5
    1520:	41 e0       	ldi	r20, 0x01	; 1
    1522:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1526:	0b c0       	rjmp	.+22     	; 0x153e <LED_vInit+0xd2>
		case LED6_ID:	DIO_vSetPinDir(LED6_PORT,LED6_PIN,DIR_OUTPUT);	break;
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	66 e0       	ldi	r22, 0x06	; 6
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1532:	05 c0       	rjmp	.+10     	; 0x153e <LED_vInit+0xd2>
		case LED7_ID:	DIO_vSetPinDir(LED7_PORT,LED7_PIN,DIR_OUTPUT);	break;
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	67 e0       	ldi	r22, 0x07	; 7
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
	}
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <LED_vTurnOn>:

void LED_vTurnOn(u8 A_u8LedId){
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <LED_vTurnOn+0x6>
    1550:	0f 92       	push	r0
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8LedId){
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	3b 83       	std	Y+3, r19	; 0x03
    1560:	2a 83       	std	Y+2, r18	; 0x02
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	9b 81       	ldd	r25, Y+3	; 0x03
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	d9 f1       	breq	.+118    	; 0x15e2 <LED_vTurnOn+0x98>
    156c:	2a 81       	ldd	r18, Y+2	; 0x02
    156e:	3b 81       	ldd	r19, Y+3	; 0x03
    1570:	24 30       	cpi	r18, 0x04	; 4
    1572:	31 05       	cpc	r19, r1
    1574:	7c f4       	brge	.+30     	; 0x1594 <LED_vTurnOn+0x4a>
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	9b 81       	ldd	r25, Y+3	; 0x03
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	29 f1       	breq	.+74     	; 0x15ca <LED_vTurnOn+0x80>
    1580:	2a 81       	ldd	r18, Y+2	; 0x02
    1582:	3b 81       	ldd	r19, Y+3	; 0x03
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	34 f5       	brge	.+76     	; 0x15d6 <LED_vTurnOn+0x8c>
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	b1 f0       	breq	.+44     	; 0x15be <LED_vTurnOn+0x74>
    1592:	44 c0       	rjmp	.+136    	; 0x161c <LED_vTurnOn+0xd2>
    1594:	2a 81       	ldd	r18, Y+2	; 0x02
    1596:	3b 81       	ldd	r19, Y+3	; 0x03
    1598:	25 30       	cpi	r18, 0x05	; 5
    159a:	31 05       	cpc	r19, r1
    159c:	71 f1       	breq	.+92     	; 0x15fa <LED_vTurnOn+0xb0>
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	85 30       	cpi	r24, 0x05	; 5
    15a4:	91 05       	cpc	r25, r1
    15a6:	1c f1       	brlt	.+70     	; 0x15ee <LED_vTurnOn+0xa4>
    15a8:	2a 81       	ldd	r18, Y+2	; 0x02
    15aa:	3b 81       	ldd	r19, Y+3	; 0x03
    15ac:	26 30       	cpi	r18, 0x06	; 6
    15ae:	31 05       	cpc	r19, r1
    15b0:	51 f1       	breq	.+84     	; 0x1606 <LED_vTurnOn+0xbc>
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	9b 81       	ldd	r25, Y+3	; 0x03
    15b6:	87 30       	cpi	r24, 0x07	; 7
    15b8:	91 05       	cpc	r25, r1
    15ba:	59 f1       	breq	.+86     	; 0x1612 <LED_vTurnOn+0xc8>
    15bc:	2f c0       	rjmp	.+94     	; 0x161c <LED_vTurnOn+0xd2>
		case LED0_ID:	DIO_vSetPinVal(LED0_PORT,LED0_PIN,VAL_HIGH);	break;
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    15c8:	29 c0       	rjmp	.+82     	; 0x161c <LED_vTurnOn+0xd2>
		case LED1_ID: 	DIO_vSetPinVal(LED1_PORT,LED1_PIN,VAL_HIGH);	break;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	41 e0       	ldi	r20, 0x01	; 1
    15d0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    15d4:	23 c0       	rjmp	.+70     	; 0x161c <LED_vTurnOn+0xd2>
		case LED2_ID:	DIO_vSetPinVal(LED2_PORT,LED2_PIN,VAL_HIGH);	break;
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	62 e0       	ldi	r22, 0x02	; 2
    15da:	41 e0       	ldi	r20, 0x01	; 1
    15dc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    15e0:	1d c0       	rjmp	.+58     	; 0x161c <LED_vTurnOn+0xd2>
		case LED3_ID:	DIO_vSetPinVal(LED3_PORT,LED3_PIN,VAL_HIGH);	break;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	63 e0       	ldi	r22, 0x03	; 3
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    15ec:	17 c0       	rjmp	.+46     	; 0x161c <LED_vTurnOn+0xd2>
		case LED4_ID:	DIO_vSetPinVal(LED4_PORT,LED4_PIN,VAL_HIGH);	break;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	64 e0       	ldi	r22, 0x04	; 4
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    15f8:	11 c0       	rjmp	.+34     	; 0x161c <LED_vTurnOn+0xd2>
		case LED5_ID:	DIO_vSetPinVal(LED5_PORT,LED5_PIN,VAL_HIGH);	break;
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	65 e0       	ldi	r22, 0x05	; 5
    15fe:	41 e0       	ldi	r20, 0x01	; 1
    1600:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    1604:	0b c0       	rjmp	.+22     	; 0x161c <LED_vTurnOn+0xd2>
		case LED6_ID:	DIO_vSetPinVal(LED6_PORT,LED6_PIN,VAL_HIGH);	break;
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	66 e0       	ldi	r22, 0x06	; 6
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    1610:	05 c0       	rjmp	.+10     	; 0x161c <LED_vTurnOn+0xd2>
		case LED7_ID:	DIO_vSetPinVal(LED7_PORT,LED7_PIN,VAL_HIGH);	break;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	67 e0       	ldi	r22, 0x07	; 7
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
	}
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <LED_vTurnOff>:

void LED_vTurnOff(u8 A_u8LedId){
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <LED_vTurnOff+0x6>
    162e:	0f 92       	push	r0
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8LedId){
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3b 83       	std	Y+3, r19	; 0x03
    163e:	2a 83       	std	Y+2, r18	; 0x02
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	9b 81       	ldd	r25, Y+3	; 0x03
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	d9 f1       	breq	.+118    	; 0x16c0 <LED_vTurnOff+0x98>
    164a:	2a 81       	ldd	r18, Y+2	; 0x02
    164c:	3b 81       	ldd	r19, Y+3	; 0x03
    164e:	24 30       	cpi	r18, 0x04	; 4
    1650:	31 05       	cpc	r19, r1
    1652:	7c f4       	brge	.+30     	; 0x1672 <LED_vTurnOff+0x4a>
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	81 30       	cpi	r24, 0x01	; 1
    165a:	91 05       	cpc	r25, r1
    165c:	29 f1       	breq	.+74     	; 0x16a8 <LED_vTurnOff+0x80>
    165e:	2a 81       	ldd	r18, Y+2	; 0x02
    1660:	3b 81       	ldd	r19, Y+3	; 0x03
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	34 f5       	brge	.+76     	; 0x16b4 <LED_vTurnOff+0x8c>
    1668:	8a 81       	ldd	r24, Y+2	; 0x02
    166a:	9b 81       	ldd	r25, Y+3	; 0x03
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	b1 f0       	breq	.+44     	; 0x169c <LED_vTurnOff+0x74>
    1670:	44 c0       	rjmp	.+136    	; 0x16fa <LED_vTurnOff+0xd2>
    1672:	2a 81       	ldd	r18, Y+2	; 0x02
    1674:	3b 81       	ldd	r19, Y+3	; 0x03
    1676:	25 30       	cpi	r18, 0x05	; 5
    1678:	31 05       	cpc	r19, r1
    167a:	71 f1       	breq	.+92     	; 0x16d8 <LED_vTurnOff+0xb0>
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	85 30       	cpi	r24, 0x05	; 5
    1682:	91 05       	cpc	r25, r1
    1684:	1c f1       	brlt	.+70     	; 0x16cc <LED_vTurnOff+0xa4>
    1686:	2a 81       	ldd	r18, Y+2	; 0x02
    1688:	3b 81       	ldd	r19, Y+3	; 0x03
    168a:	26 30       	cpi	r18, 0x06	; 6
    168c:	31 05       	cpc	r19, r1
    168e:	51 f1       	breq	.+84     	; 0x16e4 <LED_vTurnOff+0xbc>
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	9b 81       	ldd	r25, Y+3	; 0x03
    1694:	87 30       	cpi	r24, 0x07	; 7
    1696:	91 05       	cpc	r25, r1
    1698:	59 f1       	breq	.+86     	; 0x16f0 <LED_vTurnOff+0xc8>
    169a:	2f c0       	rjmp	.+94     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED0_ID:	DIO_vSetPinVal(LED0_PORT,LED0_PIN,VAL_LOW);	break;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	40 e0       	ldi	r20, 0x00	; 0
    16a2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    16a6:	29 c0       	rjmp	.+82     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED1_ID: 	DIO_vSetPinVal(LED1_PORT,LED1_PIN,VAL_LOW);	break;
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	61 e0       	ldi	r22, 0x01	; 1
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    16b2:	23 c0       	rjmp	.+70     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED2_ID:	DIO_vSetPinVal(LED2_PORT,LED2_PIN,VAL_LOW);	break;
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    16be:	1d c0       	rjmp	.+58     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED3_ID:	DIO_vSetPinVal(LED3_PORT,LED3_PIN,VAL_LOW);	break;
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	63 e0       	ldi	r22, 0x03	; 3
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    16ca:	17 c0       	rjmp	.+46     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED4_ID:	DIO_vSetPinVal(LED4_PORT,LED4_PIN,VAL_LOW);	break;
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	64 e0       	ldi	r22, 0x04	; 4
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    16d6:	11 c0       	rjmp	.+34     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED5_ID:	DIO_vSetPinVal(LED5_PORT,LED5_PIN,VAL_LOW);	break;
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	65 e0       	ldi	r22, 0x05	; 5
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED6_ID:	DIO_vSetPinVal(LED6_PORT,LED6_PIN,VAL_LOW);	break;
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	66 e0       	ldi	r22, 0x06	; 6
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <LED_vTurnOff+0xd2>
		case LED7_ID:	DIO_vSetPinVal(LED7_PORT,LED7_PIN,VAL_LOW);	break;
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	67 e0       	ldi	r22, 0x07	; 7
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
	}
}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	cf 91       	pop	r28
    1702:	df 91       	pop	r29
    1704:	08 95       	ret

00001706 <LED_vTurnAllOn>:

void LED_vTurnAllOn(){
    1706:	df 93       	push	r29
    1708:	cf 93       	push	r28
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
	LED_vTurnOn(LED0_ID);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
	LED_vTurnOn(LED1_ID);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
	LED_vTurnOn(LED2_ID);
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
	LED_vTurnOn(LED3_ID);
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
	LED_vTurnOn(LED4_ID);
    1726:	84 e0       	ldi	r24, 0x04	; 4
    1728:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
	LED_vTurnOn(LED5_ID);
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
	LED_vTurnOn(LED6_ID);
    1732:	86 e0       	ldi	r24, 0x06	; 6
    1734:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
	LED_vTurnOn(LED7_ID);
    1738:	87 e0       	ldi	r24, 0x07	; 7
    173a:	0e 94 a5 0a 	call	0x154a	; 0x154a <LED_vTurnOn>
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <LED_vTurnAllOff>:

void LED_vTurnAllOff(){
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
	LED_vTurnOff(LED0_ID);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
	LED_vTurnOff(LED1_ID);
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
	LED_vTurnOff(LED2_ID);
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
	LED_vTurnOff(LED3_ID);
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
	LED_vTurnOff(LED4_ID);
    1764:	84 e0       	ldi	r24, 0x04	; 4
    1766:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
	LED_vTurnOff(LED5_ID);
    176a:	85 e0       	ldi	r24, 0x05	; 5
    176c:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
	LED_vTurnOff(LED6_ID);
    1770:	86 e0       	ldi	r24, 0x06	; 6
    1772:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
	LED_vTurnOff(LED7_ID);
    1776:	87 e0       	ldi	r24, 0x07	; 7
    1778:	0e 94 14 0b 	call	0x1628	; 0x1628 <LED_vTurnOff>
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <BTN_vInit>:
#include "BTN_pri.h"
#include "BTN_cfg.h"
#include "BTN_int.h"


void BTN_vInit(u8 A_u8BtnId){
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <BTN_vInit+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <BTN_vInit+0x8>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8BtnId){
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3d 83       	std	Y+5, r19	; 0x05
    179a:	2c 83       	std	Y+4, r18	; 0x04
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	83 30       	cpi	r24, 0x03	; 3
    17a2:	91 05       	cpc	r25, r1
    17a4:	d9 f1       	breq	.+118    	; 0x181c <BTN_vInit+0x9a>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	24 30       	cpi	r18, 0x04	; 4
    17ac:	31 05       	cpc	r19, r1
    17ae:	7c f4       	brge	.+30     	; 0x17ce <BTN_vInit+0x4c>
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	29 f1       	breq	.+74     	; 0x1804 <BTN_vInit+0x82>
    17ba:	2c 81       	ldd	r18, Y+4	; 0x04
    17bc:	3d 81       	ldd	r19, Y+5	; 0x05
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	34 f5       	brge	.+76     	; 0x1810 <BTN_vInit+0x8e>
    17c4:	8c 81       	ldd	r24, Y+4	; 0x04
    17c6:	9d 81       	ldd	r25, Y+5	; 0x05
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	b1 f0       	breq	.+44     	; 0x17f8 <BTN_vInit+0x76>
    17cc:	44 c0       	rjmp	.+136    	; 0x1856 <BTN_vInit+0xd4>
    17ce:	2c 81       	ldd	r18, Y+4	; 0x04
    17d0:	3d 81       	ldd	r19, Y+5	; 0x05
    17d2:	25 30       	cpi	r18, 0x05	; 5
    17d4:	31 05       	cpc	r19, r1
    17d6:	71 f1       	breq	.+92     	; 0x1834 <BTN_vInit+0xb2>
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	85 30       	cpi	r24, 0x05	; 5
    17de:	91 05       	cpc	r25, r1
    17e0:	1c f1       	brlt	.+70     	; 0x1828 <BTN_vInit+0xa6>
    17e2:	2c 81       	ldd	r18, Y+4	; 0x04
    17e4:	3d 81       	ldd	r19, Y+5	; 0x05
    17e6:	26 30       	cpi	r18, 0x06	; 6
    17e8:	31 05       	cpc	r19, r1
    17ea:	51 f1       	breq	.+84     	; 0x1840 <BTN_vInit+0xbe>
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	9d 81       	ldd	r25, Y+5	; 0x05
    17f0:	87 30       	cpi	r24, 0x07	; 7
    17f2:	91 05       	cpc	r25, r1
    17f4:	59 f1       	breq	.+86     	; 0x184c <BTN_vInit+0xca>
    17f6:	2f c0       	rjmp	.+94     	; 0x1856 <BTN_vInit+0xd4>
		case BTN0_ID:	DIO_vSetPinDir(BTN0_PORT,BTN0_PIN,DIR_INPUT);	break;
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1802:	29 c0       	rjmp	.+82     	; 0x1856 <BTN_vInit+0xd4>
		case BTN1_ID: 	DIO_vSetPinDir(BTN1_PORT,BTN1_PIN,DIR_INPUT);	break;
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    180e:	23 c0       	rjmp	.+70     	; 0x1856 <BTN_vInit+0xd4>
		case BTN2_ID:	DIO_vSetPinDir(BTN2_PORT,BTN2_PIN,DIR_INPUT);	break;
    1810:	83 e0       	ldi	r24, 0x03	; 3
    1812:	62 e0       	ldi	r22, 0x02	; 2
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    181a:	1d c0       	rjmp	.+58     	; 0x1856 <BTN_vInit+0xd4>
		case BTN3_ID:	DIO_vSetPinDir(BTN3_PORT,BTN3_PIN,DIR_INPUT);	break;
    181c:	83 e0       	ldi	r24, 0x03	; 3
    181e:	63 e0       	ldi	r22, 0x03	; 3
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1826:	17 c0       	rjmp	.+46     	; 0x1856 <BTN_vInit+0xd4>
		case BTN4_ID:	DIO_vSetPinDir(BTN4_PORT,BTN4_PIN,DIR_INPUT);	break;
    1828:	83 e0       	ldi	r24, 0x03	; 3
    182a:	64 e0       	ldi	r22, 0x04	; 4
    182c:	40 e0       	ldi	r20, 0x00	; 0
    182e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    1832:	11 c0       	rjmp	.+34     	; 0x1856 <BTN_vInit+0xd4>
		case BTN5_ID:	DIO_vSetPinDir(BTN5_PORT,BTN5_PIN,DIR_INPUT);	break;
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	65 e0       	ldi	r22, 0x05	; 5
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    183e:	0b c0       	rjmp	.+22     	; 0x1856 <BTN_vInit+0xd4>
		case BTN6_ID:	DIO_vSetPinDir(BTN6_PORT,BTN6_PIN,DIR_INPUT);	break;
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	66 e0       	ldi	r22, 0x06	; 6
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <BTN_vInit+0xd4>
		case BTN7_ID:	DIO_vSetPinDir(BTN7_PORT,BTN7_PIN,DIR_INPUT);	break;
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	67 e0       	ldi	r22, 0x07	; 7
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_vSetPinDir>
	}
#if (BTN_PULLING==INTERNAL_PULLUP)				// will be in code only if BTN_PULLING==INTERNAL_PULLIP
	switch(A_u8BtnId){
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	3b 83       	std	Y+3, r19	; 0x03
    185e:	2a 83       	std	Y+2, r18	; 0x02
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	91 05       	cpc	r25, r1
    1868:	d9 f1       	breq	.+118    	; 0x18e0 <BTN_vInit+0x15e>
    186a:	2a 81       	ldd	r18, Y+2	; 0x02
    186c:	3b 81       	ldd	r19, Y+3	; 0x03
    186e:	24 30       	cpi	r18, 0x04	; 4
    1870:	31 05       	cpc	r19, r1
    1872:	7c f4       	brge	.+30     	; 0x1892 <BTN_vInit+0x110>
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	9b 81       	ldd	r25, Y+3	; 0x03
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	91 05       	cpc	r25, r1
    187c:	29 f1       	breq	.+74     	; 0x18c8 <BTN_vInit+0x146>
    187e:	2a 81       	ldd	r18, Y+2	; 0x02
    1880:	3b 81       	ldd	r19, Y+3	; 0x03
    1882:	22 30       	cpi	r18, 0x02	; 2
    1884:	31 05       	cpc	r19, r1
    1886:	34 f5       	brge	.+76     	; 0x18d4 <BTN_vInit+0x152>
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	b1 f0       	breq	.+44     	; 0x18bc <BTN_vInit+0x13a>
    1890:	44 c0       	rjmp	.+136    	; 0x191a <BTN_vInit+0x198>
    1892:	2a 81       	ldd	r18, Y+2	; 0x02
    1894:	3b 81       	ldd	r19, Y+3	; 0x03
    1896:	25 30       	cpi	r18, 0x05	; 5
    1898:	31 05       	cpc	r19, r1
    189a:	71 f1       	breq	.+92     	; 0x18f8 <BTN_vInit+0x176>
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	85 30       	cpi	r24, 0x05	; 5
    18a2:	91 05       	cpc	r25, r1
    18a4:	1c f1       	brlt	.+70     	; 0x18ec <BTN_vInit+0x16a>
    18a6:	2a 81       	ldd	r18, Y+2	; 0x02
    18a8:	3b 81       	ldd	r19, Y+3	; 0x03
    18aa:	26 30       	cpi	r18, 0x06	; 6
    18ac:	31 05       	cpc	r19, r1
    18ae:	51 f1       	breq	.+84     	; 0x1904 <BTN_vInit+0x182>
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	87 30       	cpi	r24, 0x07	; 7
    18b6:	91 05       	cpc	r25, r1
    18b8:	59 f1       	breq	.+86     	; 0x1910 <BTN_vInit+0x18e>
    18ba:	2f c0       	rjmp	.+94     	; 0x191a <BTN_vInit+0x198>
		case BTN0_ID:	DIO_vSetPinVal(BTN0_PORT,BTN0_PIN,VAL_HIGH);	break;
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	41 e0       	ldi	r20, 0x01	; 1
    18c2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    18c6:	29 c0       	rjmp	.+82     	; 0x191a <BTN_vInit+0x198>
		case BTN1_ID: 	DIO_vSetPinVal(BTN1_PORT,BTN1_PIN,VAL_HIGH);	break;
    18c8:	83 e0       	ldi	r24, 0x03	; 3
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	41 e0       	ldi	r20, 0x01	; 1
    18ce:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    18d2:	23 c0       	rjmp	.+70     	; 0x191a <BTN_vInit+0x198>
		case BTN2_ID:	DIO_vSetPinVal(BTN2_PORT,BTN2_PIN,VAL_HIGH);	break;
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	62 e0       	ldi	r22, 0x02	; 2
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    18de:	1d c0       	rjmp	.+58     	; 0x191a <BTN_vInit+0x198>
		case BTN3_ID:	DIO_vSetPinVal(BTN3_PORT,BTN3_PIN,VAL_HIGH);	break;
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	63 e0       	ldi	r22, 0x03	; 3
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    18ea:	17 c0       	rjmp	.+46     	; 0x191a <BTN_vInit+0x198>
		case BTN4_ID:	DIO_vSetPinVal(BTN4_PORT,BTN4_PIN,VAL_HIGH);	break;
    18ec:	83 e0       	ldi	r24, 0x03	; 3
    18ee:	64 e0       	ldi	r22, 0x04	; 4
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    18f6:	11 c0       	rjmp	.+34     	; 0x191a <BTN_vInit+0x198>
		case BTN5_ID:	DIO_vSetPinVal(BTN5_PORT,BTN5_PIN,VAL_HIGH);	break;
    18f8:	83 e0       	ldi	r24, 0x03	; 3
    18fa:	65 e0       	ldi	r22, 0x05	; 5
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    1902:	0b c0       	rjmp	.+22     	; 0x191a <BTN_vInit+0x198>
		case BTN6_ID:	DIO_vSetPinVal(BTN6_PORT,BTN6_PIN,VAL_HIGH);	break;
    1904:	83 e0       	ldi	r24, 0x03	; 3
    1906:	66 e0       	ldi	r22, 0x06	; 6
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
    190e:	05 c0       	rjmp	.+10     	; 0x191a <BTN_vInit+0x198>
		case BTN7_ID:	DIO_vSetPinVal(BTN7_PORT,BTN7_PIN,VAL_HIGH);	break;
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	67 e0       	ldi	r22, 0x07	; 7
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 5e 06 	call	0xcbc	; 0xcbc <DIO_vSetPinVal>
#endif
	}
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	08 95       	ret

0000192a <BTN_u8GetState>:

u8 BTN_u8GetState(u8 A_u8BtnId){
    192a:	df 93       	push	r29
    192c:	cf 93       	push	r28
    192e:	00 d0       	rcall	.+0      	; 0x1930 <BTN_u8GetState+0x6>
    1930:	00 d0       	rcall	.+0      	; 0x1932 <BTN_u8GetState+0x8>
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8b 83       	std	Y+3, r24	; 0x03
	u8 L_u8BtnState;
	u8 L_u8ResState;
	switch(A_u8BtnId){
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3d 83       	std	Y+5, r19	; 0x05
    1942:	2c 83       	std	Y+4, r18	; 0x04
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	91 05       	cpc	r25, r1
    194c:	d9 f1       	breq	.+118    	; 0x19c4 <BTN_u8GetState+0x9a>
    194e:	2c 81       	ldd	r18, Y+4	; 0x04
    1950:	3d 81       	ldd	r19, Y+5	; 0x05
    1952:	24 30       	cpi	r18, 0x04	; 4
    1954:	31 05       	cpc	r19, r1
    1956:	7c f4       	brge	.+30     	; 0x1976 <BTN_u8GetState+0x4c>
    1958:	8c 81       	ldd	r24, Y+4	; 0x04
    195a:	9d 81       	ldd	r25, Y+5	; 0x05
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	91 05       	cpc	r25, r1
    1960:	29 f1       	breq	.+74     	; 0x19ac <BTN_u8GetState+0x82>
    1962:	2c 81       	ldd	r18, Y+4	; 0x04
    1964:	3d 81       	ldd	r19, Y+5	; 0x05
    1966:	22 30       	cpi	r18, 0x02	; 2
    1968:	31 05       	cpc	r19, r1
    196a:	34 f5       	brge	.+76     	; 0x19b8 <BTN_u8GetState+0x8e>
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
    196e:	9d 81       	ldd	r25, Y+5	; 0x05
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	b1 f0       	breq	.+44     	; 0x19a0 <BTN_u8GetState+0x76>
    1974:	44 c0       	rjmp	.+136    	; 0x19fe <BTN_u8GetState+0xd4>
    1976:	2c 81       	ldd	r18, Y+4	; 0x04
    1978:	3d 81       	ldd	r19, Y+5	; 0x05
    197a:	25 30       	cpi	r18, 0x05	; 5
    197c:	31 05       	cpc	r19, r1
    197e:	71 f1       	breq	.+92     	; 0x19dc <BTN_u8GetState+0xb2>
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	85 30       	cpi	r24, 0x05	; 5
    1986:	91 05       	cpc	r25, r1
    1988:	1c f1       	brlt	.+70     	; 0x19d0 <BTN_u8GetState+0xa6>
    198a:	2c 81       	ldd	r18, Y+4	; 0x04
    198c:	3d 81       	ldd	r19, Y+5	; 0x05
    198e:	26 30       	cpi	r18, 0x06	; 6
    1990:	31 05       	cpc	r19, r1
    1992:	51 f1       	breq	.+84     	; 0x19e8 <BTN_u8GetState+0xbe>
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	87 30       	cpi	r24, 0x07	; 7
    199a:	91 05       	cpc	r25, r1
    199c:	59 f1       	breq	.+86     	; 0x19f4 <BTN_u8GetState+0xca>
    199e:	2f c0       	rjmp	.+94     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN0_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN0_PORT,BTN0_PIN);	break;
    19a0:	83 e0       	ldi	r24, 0x03	; 3
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19a8:	8a 83       	std	Y+2, r24	; 0x02
    19aa:	29 c0       	rjmp	.+82     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN1_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN1_PORT,BTN1_PIN);	break;
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	61 e0       	ldi	r22, 0x01	; 1
    19b0:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19b4:	8a 83       	std	Y+2, r24	; 0x02
    19b6:	23 c0       	rjmp	.+70     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN2_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN2_PORT,BTN2_PIN); break;
    19b8:	83 e0       	ldi	r24, 0x03	; 3
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19c0:	8a 83       	std	Y+2, r24	; 0x02
    19c2:	1d c0       	rjmp	.+58     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN3_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN3_PORT,BTN3_PIN);	break;
    19c4:	83 e0       	ldi	r24, 0x03	; 3
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19cc:	8a 83       	std	Y+2, r24	; 0x02
    19ce:	17 c0       	rjmp	.+46     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN4_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN4_PORT,BTN4_PIN);	break;
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	64 e0       	ldi	r22, 0x04	; 4
    19d4:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19d8:	8a 83       	std	Y+2, r24	; 0x02
    19da:	11 c0       	rjmp	.+34     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN5_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN5_PORT,BTN5_PIN);	break;
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	65 e0       	ldi	r22, 0x05	; 5
    19e0:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19e4:	8a 83       	std	Y+2, r24	; 0x02
    19e6:	0b c0       	rjmp	.+22     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN6_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN6_PORT,BTN6_PIN);	break;
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	66 e0       	ldi	r22, 0x06	; 6
    19ec:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <BTN_u8GetState+0xd4>
		case BTN7_ID:	L_u8BtnState = DIO_u8GetPinVal(BTN7_PORT,BTN7_PIN);	break;
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	67 e0       	ldi	r22, 0x07	; 7
    19f8:	0e 94 19 07 	call	0xe32	; 0xe32 <DIO_u8GetPinVal>
    19fc:	8a 83       	std	Y+2, r24	; 0x02
	}
	if(L_u8BtnState==0){	L_u8ResState=BTN_ON;	}
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	88 23       	and	r24, r24
    1a02:	19 f4       	brne	.+6      	; 0x1a0a <BTN_u8GetState+0xe0>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <BTN_u8GetState+0xe2>
	else				{	L_u8ResState=BTN_OFF;	}
    1a0a:	19 82       	std	Y+1, r1	; 0x01
	return L_u8ResState;
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	cf 91       	pop	r28
    1a1a:	df 91       	pop	r29
    1a1c:	08 95       	ret

00001a1e <SSD_vDisplayPattern>:
#include "../../HAL/SSD/SSD_pri.h"
#include "../../HAL/SSD/SSD_cfg.h"
#include "../../HAL/SSD/SSD_int.h"


void SSD_vDisplayPattern(u8 A_u8SsdId,u8 A_u8Val){
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <SSD_vDisplayPattern+0x6>
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <SSD_vDisplayPattern+0x8>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	6a 83       	std	Y+2, r22	; 0x02
			0b00010000,
			0b00100000,
			0b00000001,
	};

	switch(A_u8SsdId)
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	28 2f       	mov	r18, r24
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	3c 83       	std	Y+4, r19	; 0x04
    1a36:	2b 83       	std	Y+3, r18	; 0x03
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	31 f0       	breq	.+12     	; 0x1a4c <SSD_vDisplayPattern+0x2e>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	21 30       	cpi	r18, 0x01	; 1
    1a46:	31 05       	cpc	r19, r1
    1a48:	69 f0       	breq	.+26     	; 0x1a64 <SSD_vDisplayPattern+0x46>
    1a4a:	17 c0       	rjmp	.+46     	; 0x1a7a <SSD_vDisplayPattern+0x5c>
	{
		case SSD0_ID:
		{
#if(SSD_COM==COM_CATHODE)
			DIO_vSetPortVal(SSD0_DATA_PORT,L_u8SsdPatternArr[A_u8Val]);
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	fc 01       	movw	r30, r24
    1a54:	ee 58       	subi	r30, 0x8E	; 142
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	90 81       	ld	r25, Z
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	69 2f       	mov	r22, r25
    1a5e:	0e 94 0f 08 	call	0x101e	; 0x101e <DIO_vSetPortVal>
    1a62:	0b c0       	rjmp	.+22     	; 0x1a7a <SSD_vDisplayPattern+0x5c>
		}

		case SSD1_ID:
		{
#if(SSD_COM==COM_CATHODE)
			DIO_vSetPortVal(SSD1_DATA_PORT,L_u8SsdPatternArr[A_u8Val]);
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	ee 58       	subi	r30, 0x8E	; 142
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	90 81       	ld	r25, Z
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	69 2f       	mov	r22, r25
    1a76:	0e 94 0f 08 	call	0x101e	; 0x101e <DIO_vSetPortVal>
			DIO_vSetPortVal(SSD1_DATA_PORT,~(L_u8SsdPatternArr[A_u8Val]));
#endif
		break;
		}
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <main>:

#include <util/delay.h>

u8 stopBit=0;

int main (){
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	ec 97       	sbiw	r28, 0x3c	; 60
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61

	SWITCH_vInitAll();
    1a9c:	0e 94 04 09 	call	0x1208	; 0x1208 <SWITCH_vInitAll>
	SSD_vInitBoth();
    1aa0:	0e 94 9a 09 	call	0x1334	; 0x1334 <SSD_vInitBoth>

	int i,iterate;

	while(1){

		iterate=1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9a af       	std	Y+58, r25	; 0x3a
    1aaa:	89 af       	std	Y+57, r24	; 0x39
		if(SWITCH_u8GetState(SWITCH2_ID)==0 && SWITCH_u8GetState(SWITCH1_ID)==1){	// clockWise
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <main+0x30>
    1ab6:	30 c1       	rjmp	.+608    	; 0x1d18 <main+0x290>
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	09 f0       	breq	.+2      	; 0x1ac4 <main+0x3c>
    1ac2:	2a c1       	rjmp	.+596    	; 0x1d18 <main+0x290>
			while(1){
				for(i=stopBit;i<=7;i++){
    1ac4:	80 91 7a 00 	lds	r24, 0x007A
    1ac8:	88 2f       	mov	r24, r24
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9c af       	std	Y+60, r25	; 0x3c
    1ace:	8b af       	std	Y+59, r24	; 0x3b
    1ad0:	16 c1       	rjmp	.+556    	; 0x1cfe <main+0x276>

					if(i<4){	SSD_vTurnOn(SSD0_ID);	SSD_vDisplayPattern(SSD0_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD0_ID);	}
    1ad2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ad4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	91 05       	cpc	r25, r1
    1ada:	0c f0       	brlt	.+2      	; 0x1ade <main+0x56>
    1adc:	7e c0       	rjmp	.+252    	; 0x1bda <main+0x152>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	0e 94 b3 09 	call	0x1366	; 0x1366 <SSD_vTurnOn>
    1ae4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	69 2f       	mov	r22, r25
    1aea:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <SSD_vDisplayPattern>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	aa ef       	ldi	r26, 0xFA	; 250
    1af4:	b3 e4       	ldi	r27, 0x43	; 67
    1af6:	8d ab       	std	Y+53, r24	; 0x35
    1af8:	9e ab       	std	Y+54, r25	; 0x36
    1afa:	af ab       	std	Y+55, r26	; 0x37
    1afc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6d a9       	ldd	r22, Y+53	; 0x35
    1b00:	7e a9       	ldd	r23, Y+54	; 0x36
    1b02:	8f a9       	ldd	r24, Y+55	; 0x37
    1b04:	98 ad       	ldd	r25, Y+56	; 0x38
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	89 ab       	std	Y+49, r24	; 0x31
    1b18:	9a ab       	std	Y+50, r25	; 0x32
    1b1a:	ab ab       	std	Y+51, r26	; 0x33
    1b1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b20:	7a a9       	ldd	r23, Y+50	; 0x32
    1b22:	8b a9       	ldd	r24, Y+51	; 0x33
    1b24:	9c a9       	ldd	r25, Y+52	; 0x34
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <main+0xb8>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	98 ab       	std	Y+48, r25	; 0x30
    1b3c:	8f a7       	std	Y+47, r24	; 0x2f
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <main+0x136>
	else if (__tmp > 65535)
    1b40:	69 a9       	ldd	r22, Y+49	; 0x31
    1b42:	7a a9       	ldd	r23, Y+50	; 0x32
    1b44:	8b a9       	ldd	r24, Y+51	; 0x33
    1b46:	9c a9       	ldd	r25, Y+52	; 0x34
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <main+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	98 ab       	std	Y+48, r25	; 0x30
    1b7e:	8f a7       	std	Y+47, r24	; 0x2f
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <main+0x118>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9e a7       	std	Y+46, r25	; 0x2e
    1b88:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <main+0x106>
    1b92:	9e a7       	std	Y+46, r25	; 0x2e
    1b94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b98:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	98 ab       	std	Y+48, r25	; 0x30
    1b9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <main+0xfa>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	69 a9       	ldd	r22, Y+49	; 0x31
    1bac:	7a a9       	ldd	r23, Y+50	; 0x32
    1bae:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	98 ab       	std	Y+48, r25	; 0x30
    1bbc:	8f a7       	std	Y+47, r24	; 0x2f
    1bbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc2:	9c a7       	std	Y+44, r25	; 0x2c
    1bc4:	8b a7       	std	Y+43, r24	; 0x2b
    1bc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <main+0x142>
    1bce:	9c a7       	std	Y+44, r25	; 0x2c
    1bd0:	8b a7       	std	Y+43, r24	; 0x2b
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SSD_vTurnOff>
    1bd8:	7d c0       	rjmp	.+250    	; 0x1cd4 <main+0x24c>
					else   {	SSD_vTurnOn(SSD1_ID);	SSD_vDisplayPattern(SSD1_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD1_ID);	}
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	0e 94 b3 09 	call	0x1366	; 0x1366 <SSD_vTurnOn>
    1be0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	69 2f       	mov	r22, r25
    1be6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <SSD_vDisplayPattern>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	aa ef       	ldi	r26, 0xFA	; 250
    1bf0:	b3 e4       	ldi	r27, 0x43	; 67
    1bf2:	8f a3       	std	Y+39, r24	; 0x27
    1bf4:	98 a7       	std	Y+40, r25	; 0x28
    1bf6:	a9 a7       	std	Y+41, r26	; 0x29
    1bf8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfa:	6f a1       	ldd	r22, Y+39	; 0x27
    1bfc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfe:	89 a5       	ldd	r24, Y+41	; 0x29
    1c00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4a ef       	ldi	r20, 0xFA	; 250
    1c08:	54 e4       	ldi	r21, 0x44	; 68
    1c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	8b a3       	std	Y+35, r24	; 0x23
    1c14:	9c a3       	std	Y+36, r25	; 0x24
    1c16:	ad a3       	std	Y+37, r26	; 0x25
    1c18:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c20:	9e a1       	ldd	r25, Y+38	; 0x26
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2e:	88 23       	and	r24, r24
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <main+0x1b4>
		__ticks = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9a a3       	std	Y+34, r25	; 0x22
    1c38:	89 a3       	std	Y+33, r24	; 0x21
    1c3a:	3f c0       	rjmp	.+126    	; 0x1cba <main+0x232>
	else if (__tmp > 65535)
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	3f ef       	ldi	r19, 0xFF	; 255
    1c48:	4f e7       	ldi	r20, 0x7F	; 127
    1c4a:	57 e4       	ldi	r21, 0x47	; 71
    1c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c50:	18 16       	cp	r1, r24
    1c52:	4c f5       	brge	.+82     	; 0x1ca6 <main+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c54:	6f a1       	ldd	r22, Y+39	; 0x27
    1c56:	78 a5       	ldd	r23, Y+40	; 0x28
    1c58:	89 a5       	ldd	r24, Y+41	; 0x29
    1c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	40 e2       	ldi	r20, 0x20	; 32
    1c62:	51 e4       	ldi	r21, 0x41	; 65
    1c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9a a3       	std	Y+34, r25	; 0x22
    1c7a:	89 a3       	std	Y+33, r24	; 0x21
    1c7c:	0f c0       	rjmp	.+30     	; 0x1c9c <main+0x214>
    1c7e:	88 ec       	ldi	r24, 0xC8	; 200
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	98 a3       	std	Y+32, r25	; 0x20
    1c84:	8f 8f       	std	Y+31, r24	; 0x1f
    1c86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c88:	98 a1       	ldd	r25, Y+32	; 0x20
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <main+0x202>
    1c8e:	98 a3       	std	Y+32, r25	; 0x20
    1c90:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c92:	89 a1       	ldd	r24, Y+33	; 0x21
    1c94:	9a a1       	ldd	r25, Y+34	; 0x22
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	69 f7       	brne	.-38     	; 0x1c7e <main+0x1f6>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <main+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca8:	7c a1       	ldd	r23, Y+36	; 0x24
    1caa:	8d a1       	ldd	r24, Y+37	; 0x25
    1cac:	9e a1       	ldd	r25, Y+38	; 0x26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9a a3       	std	Y+34, r25	; 0x22
    1cb8:	89 a3       	std	Y+33, r24	; 0x21
    1cba:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <main+0x23e>
    1cca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SSD_vTurnOff>

					if(SWITCH_u8GetState(SWITCH2_ID)==1 && SWITCH_u8GetState(SWITCH1_ID)==0){ stopBit=i; iterate=0; break; }
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1cda:	81 30       	cpi	r24, 0x01	; 1
    1cdc:	59 f4       	brne	.+22     	; 0x1cf4 <main+0x26c>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1ce4:	88 23       	and	r24, r24
    1ce6:	31 f4       	brne	.+12     	; 0x1cf4 <main+0x26c>
    1ce8:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cea:	80 93 7a 00 	sts	0x007A, r24
    1cee:	1a ae       	std	Y+58, r1	; 0x3a
    1cf0:	19 ae       	std	Y+57, r1	; 0x39
    1cf2:	0b c0       	rjmp	.+22     	; 0x1d0a <main+0x282>
	while(1){

		iterate=1;
		if(SWITCH_u8GetState(SWITCH2_ID)==0 && SWITCH_u8GetState(SWITCH1_ID)==1){	// clockWise
			while(1){
				for(i=stopBit;i<=7;i++){
    1cf4:	8b ad       	ldd	r24, Y+59	; 0x3b
    1cf6:	9c ad       	ldd	r25, Y+60	; 0x3c
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	9c af       	std	Y+60, r25	; 0x3c
    1cfc:	8b af       	std	Y+59, r24	; 0x3b
    1cfe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d00:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d02:	88 30       	cpi	r24, 0x08	; 8
    1d04:	91 05       	cpc	r25, r1
    1d06:	0c f4       	brge	.+2      	; 0x1d0a <main+0x282>
    1d08:	e4 ce       	rjmp	.-568    	; 0x1ad2 <main+0x4a>
					if(i<4){	SSD_vTurnOn(SSD0_ID);	SSD_vDisplayPattern(SSD0_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD0_ID);	}
					else   {	SSD_vTurnOn(SSD1_ID);	SSD_vDisplayPattern(SSD1_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD1_ID);	}

					if(SWITCH_u8GetState(SWITCH2_ID)==1 && SWITCH_u8GetState(SWITCH1_ID)==0){ stopBit=i; iterate=0; break; }
				}
				if(iterate!=0) stopBit=0;
    1d0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1d0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	19 f0       	breq	.+6      	; 0x1d18 <main+0x290>
    1d12:	10 92 7a 00 	sts	0x007A, r1
    1d16:	d6 ce       	rjmp	.-596    	; 0x1ac4 <main+0x3c>
				else 			break;
			}
		}

		iterate=1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9a af       	std	Y+58, r25	; 0x3a
    1d1e:	89 af       	std	Y+57, r24	; 0x39

		if(SWITCH_u8GetState(SWITCH2_ID)==1 && SWITCH_u8GetState(SWITCH1_ID)==0){		// antiClockWise
    1d20:	82 e0       	ldi	r24, 0x02	; 2
    1d22:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	09 f0       	breq	.+2      	; 0x1d2c <main+0x2a4>
    1d2a:	bc ce       	rjmp	.-648    	; 0x1aa4 <main+0x1c>
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1d32:	88 23       	and	r24, r24
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <main+0x2b0>
    1d36:	b6 ce       	rjmp	.-660    	; 0x1aa4 <main+0x1c>
			while(1){
				for(i=stopBit;i>=0;i--){
    1d38:	80 91 7a 00 	lds	r24, 0x007A
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9c af       	std	Y+60, r25	; 0x3c
    1d42:	8b af       	std	Y+59, r24	; 0x3b
    1d44:	16 c1       	rjmp	.+556    	; 0x1f72 <main+0x4ea>

					if(i>3){	SSD_vTurnOn(SSD1_ID);	SSD_vDisplayPattern(SSD1_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD1_ID);	}
    1d46:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d48:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	0c f4       	brge	.+2      	; 0x1d52 <main+0x2ca>
    1d50:	7e c0       	rjmp	.+252    	; 0x1e4e <main+0x3c6>
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	0e 94 b3 09 	call	0x1366	; 0x1366 <SSD_vTurnOn>
    1d58:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	69 2f       	mov	r22, r25
    1d5e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <SSD_vDisplayPattern>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	aa ef       	ldi	r26, 0xFA	; 250
    1d68:	b3 e4       	ldi	r27, 0x43	; 67
    1d6a:	89 8f       	std	Y+25, r24	; 0x19
    1d6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	69 8d       	ldd	r22, Y+25	; 0x19
    1d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a ef       	ldi	r20, 0xFA	; 250
    1d80:	54 e4       	ldi	r21, 0x44	; 68
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8d 8b       	std	Y+21, r24	; 0x15
    1d8c:	9e 8b       	std	Y+22, r25	; 0x16
    1d8e:	af 8b       	std	Y+23, r26	; 0x17
    1d90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d92:	6d 89       	ldd	r22, Y+21	; 0x15
    1d94:	7e 89       	ldd	r23, Y+22	; 0x16
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <main+0x32c>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <main+0x3aa>
	else if (__tmp > 65535)
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <main+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <main+0x38c>
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9a 8b       	std	Y+18, r25	; 0x12
    1dfc:	89 8b       	std	Y+17, r24	; 0x11
    1dfe:	89 89       	ldd	r24, Y+17	; 0x11
    1e00:	9a 89       	ldd	r25, Y+18	; 0x12
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <main+0x37a>
    1e06:	9a 8b       	std	Y+18, r25	; 0x12
    1e08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <main+0x36e>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <main+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e20:	7e 89       	ldd	r23, Y+22	; 0x16
    1e22:	8f 89       	ldd	r24, Y+23	; 0x17
    1e24:	98 8d       	ldd	r25, Y+24	; 0x18
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	98 8b       	std	Y+16, r25	; 0x10
    1e38:	8f 87       	std	Y+15, r24	; 0x0f
    1e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3c:	98 89       	ldd	r25, Y+16	; 0x10
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <main+0x3b6>
    1e42:	98 8b       	std	Y+16, r25	; 0x10
    1e44:	8f 87       	std	Y+15, r24	; 0x0f
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SSD_vTurnOff>
    1e4c:	7d c0       	rjmp	.+250    	; 0x1f48 <main+0x4c0>
					else   {	SSD_vTurnOn(SSD0_ID);	SSD_vDisplayPattern(SSD0_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD0_ID);	}
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	0e 94 b3 09 	call	0x1366	; 0x1366 <SSD_vTurnOn>
    1e54:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	69 2f       	mov	r22, r25
    1e5a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <SSD_vDisplayPattern>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	aa ef       	ldi	r26, 0xFA	; 250
    1e64:	b3 e4       	ldi	r27, 0x43	; 67
    1e66:	8b 87       	std	Y+11, r24	; 0x0b
    1e68:	9c 87       	std	Y+12, r25	; 0x0c
    1e6a:	ad 87       	std	Y+13, r26	; 0x0d
    1e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a ef       	ldi	r20, 0xFA	; 250
    1e7c:	54 e4       	ldi	r21, 0x44	; 68
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8f 83       	std	Y+7, r24	; 0x07
    1e88:	98 87       	std	Y+8, r25	; 0x08
    1e8a:	a9 87       	std	Y+9, r26	; 0x09
    1e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <main+0x428>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <main+0x4a6>
	else if (__tmp > 65535)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	3f ef       	ldi	r19, 0xFF	; 255
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	57 e4       	ldi	r21, 0x47	; 71
    1ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <main+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <main+0x488>
    1ef2:	88 ec       	ldi	r24, 0xC8	; 200
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <main+0x476>
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <main+0x46a>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <main+0x4b2>
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	0e 94 da 09 	call	0x13b4	; 0x13b4 <SSD_vTurnOff>

					if (SWITCH_u8GetState(SWITCH2_ID)==0 && SWITCH_u8GetState(SWITCH1_ID)==1){ stopBit=i;  iterate=0;  break; }
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1f4e:	88 23       	and	r24, r24
    1f50:	59 f4       	brne	.+22     	; 0x1f68 <main+0x4e0>
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	0e 94 29 09 	call	0x1252	; 0x1252 <SWITCH_u8GetState>
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	31 f4       	brne	.+12     	; 0x1f68 <main+0x4e0>
    1f5c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f5e:	80 93 7a 00 	sts	0x007A, r24
    1f62:	1a ae       	std	Y+58, r1	; 0x3a
    1f64:	19 ae       	std	Y+57, r1	; 0x39
    1f66:	0a c0       	rjmp	.+20     	; 0x1f7c <main+0x4f4>

		iterate=1;

		if(SWITCH_u8GetState(SWITCH2_ID)==1 && SWITCH_u8GetState(SWITCH1_ID)==0){		// antiClockWise
			while(1){
				for(i=stopBit;i>=0;i--){
    1f68:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f6a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	9c af       	std	Y+60, r25	; 0x3c
    1f70:	8b af       	std	Y+59, r24	; 0x3b
    1f72:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f74:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f76:	99 23       	and	r25, r25
    1f78:	0c f0       	brlt	.+2      	; 0x1f7c <main+0x4f4>
    1f7a:	e5 ce       	rjmp	.-566    	; 0x1d46 <main+0x2be>
					if(i>3){	SSD_vTurnOn(SSD1_ID);	SSD_vDisplayPattern(SSD1_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD1_ID);	}
					else   {	SSD_vTurnOn(SSD0_ID);	SSD_vDisplayPattern(SSD0_ID,i);	_delay_ms(500);	SSD_vTurnOff(SSD0_ID);	}

					if (SWITCH_u8GetState(SWITCH2_ID)==0 && SWITCH_u8GetState(SWITCH1_ID)==1){ stopBit=i;  iterate=0;  break; }
				}
				if(iterate!=0) stopBit=7;
    1f7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <main+0x4fe>
    1f84:	8f cd       	rjmp	.-1250   	; 0x1aa4 <main+0x1c>
    1f86:	87 e0       	ldi	r24, 0x07	; 7
    1f88:	80 93 7a 00 	sts	0x007A, r24
    1f8c:	d5 ce       	rjmp	.-598    	; 0x1d38 <main+0x2b0>

00001f8e <__prologue_saves__>:
    1f8e:	2f 92       	push	r2
    1f90:	3f 92       	push	r3
    1f92:	4f 92       	push	r4
    1f94:	5f 92       	push	r5
    1f96:	6f 92       	push	r6
    1f98:	7f 92       	push	r7
    1f9a:	8f 92       	push	r8
    1f9c:	9f 92       	push	r9
    1f9e:	af 92       	push	r10
    1fa0:	bf 92       	push	r11
    1fa2:	cf 92       	push	r12
    1fa4:	df 92       	push	r13
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	ca 1b       	sub	r28, r26
    1fb8:	db 0b       	sbc	r29, r27
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	09 94       	ijmp

00001fc6 <__epilogue_restores__>:
    1fc6:	2a 88       	ldd	r2, Y+18	; 0x12
    1fc8:	39 88       	ldd	r3, Y+17	; 0x11
    1fca:	48 88       	ldd	r4, Y+16	; 0x10
    1fcc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fce:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fd0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fd2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fd6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fd8:	b9 84       	ldd	r11, Y+9	; 0x09
    1fda:	c8 84       	ldd	r12, Y+8	; 0x08
    1fdc:	df 80       	ldd	r13, Y+7	; 0x07
    1fde:	ee 80       	ldd	r14, Y+6	; 0x06
    1fe0:	fd 80       	ldd	r15, Y+5	; 0x05
    1fe2:	0c 81       	ldd	r16, Y+4	; 0x04
    1fe4:	1b 81       	ldd	r17, Y+3	; 0x03
    1fe6:	aa 81       	ldd	r26, Y+2	; 0x02
    1fe8:	b9 81       	ldd	r27, Y+1	; 0x01
    1fea:	ce 0f       	add	r28, r30
    1fec:	d1 1d       	adc	r29, r1
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	ed 01       	movw	r28, r26
    1ffa:	08 95       	ret

00001ffc <_exit>:
    1ffc:	f8 94       	cli

00001ffe <__stop_program>:
    1ffe:	ff cf       	rjmp	.-2      	; 0x1ffe <__stop_program>
